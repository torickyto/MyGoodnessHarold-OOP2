<!--Product Management Page
This program module is designed for managing products in the mygoodnesharold application
It allows users to view a list of products, including ID, name, price, stock quantity, and category.
Users can delete existing products and add new ones, such as name, price, stock quantity, and category.
The interface updates in real time as products are added or removed.-->
@page "/Product_Management"
@using MyGoodnessHarold.Data;
@inject ProductService productService

<div class="product-management-container">
    <link href="css/Product_Management.css" rel="stylesheet">

    <div class="header">
        <span class="title">Product Management</span>
    </div>

    <!-- Main Content Section -->
    <div class="content">
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Stock Quantity</th>
                    <th>Category</th>
                    <th>Action</th>
                </tr>
            </thead>

            <!-- Table Body with Product Rows -->
            <tbody>
                @foreach (var product in productService.Products)
                {
                    <tr>
                        <td>@product.ProductID</td>
                        <td>@product.ProductName</td>
                        <td>@product.Price</td>
                        <td>@product.StockQuantity</td>
                        <td>@product.Category</td>
                        <td>

                            <!-- Delete Button for Each Product -->
                            <button class="delete" @onclick="() => DeleteProduct(product)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Form for Adding New Products -->
        <form>
            <label for="newProductName">New Product Name:</label>
            <input type="text" id="newProductName" @bind="newProductName" required />

            <label for="newPrice">New Price:</label>
            <input type="number" id="newPrice" step="0.01" @bind="newPrice" required />

            <label for="newStockQuantity">New Stock Quantity:</label>
            <input type="number" id="newStockQuantity" @bind="newStockQuantity" required />

            <label for="newCategoryId">New Category:</label>
            <select id="newCategoryId" @bind="newCategoryId">
                <option value="1">Mains</option>
                <option value="2">Appetizers</option>
                <option value="3">Desserts</option>
            </select>

            <!-- Button to Submit the New Product Details -->
            <button class="save" @onclick="SaveNewProduct">Save New Product</button>
        </form>
        
    </div>
</div>
@code {

    // Variables to hold new product details
    private string newProductName;
    private decimal newPrice;
    private int newStockQuantity;
    private int newCategoryId;

    // Method to Delete a Product
    private void DeleteProduct(Product product)
    {
        productService.DeleteProduct(product.ProductID);
    }

    // Method to Save a New Product
    private void SaveNewProduct()
    {
        productService.AddNewProduct(newProductName, newPrice, newStockQuantity, newCategoryId);
        ClearForm();
    }

    // Method to Clear the Input Form
    private void ClearForm()
    {
        newProductName = string.Empty;
        newPrice = 0.0m;
        newStockQuantity = 0;
        newCategoryId = 1;
    }
}