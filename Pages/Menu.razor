<!--Menu Page for My Goodness Harold POS System
    This page serves as the interactive menu for the POS system. 
    It displays the current time, greets the user by name, and allows for the selection of food items by category. 
    Users can add items to their order, see a list of selected items, and view the running total with tax. 
    The order can be finalized and printed from this interface. 
    The layout is designed for quick navigation and ease of use in a fast-paced kitchen or ordering environment.-->
@page "/menu"
@using MyGoodnessHarold.Data
@inject UserStateService userStateService
@inject TimerService timerService
@inject ProductService productService

@*
    Team members: Grady Spurrill, Ricky To, Logan Hoppen
  POS Menu System for "My Goodness Harold" Kitchen
 
  This POS (Point of Sale) menu system is designed to facilitate the ordering process for a kitchen environment.
  It displays a list of food items retrieved from a database, allowing kitchen staff or customers to place orders.
  Users are greeted by name and can view the current time. They can add items to their order by interacting with the menu,
  which updates a running total including tax. The system supports item selection, quantity updates, and order finalization.
  Once an order is finalized, a message is displayed, and there is an option to print the order. The interface is intuitive,
  ensuring a smooth ordering experience.
 *@


<div class="menu-container">
    <!-- Link to the CSS stylesheet for styling the menu page -->
    <link href="css/Menu.css" rel="stylesheet">
    <div class="menu-header">
        <div class="header-text">
            <h3>Welcome, @userStateService.FirstName</h3>
            <p>@timerService.CurrentTime.ToString("HH:mm:ss")</p>
        </div>
        <h1 class="menu-title">Menu</h1>
    </div>
    <!-- Order Printed Message: Displays Confirmation Message Post-Order -->
    @if (showMessage)
    {
        <div class="order-printed-message">
            @messageText
        </div>
    }
    <!-- Category Selection Dropdown: Allows Filtering of Menu Items by Category -->
    <select @onchange="FilterProducts">
        @foreach (var category in productService.Categories)
        {
            <option value="@category">@category</option>
        }
    </select>
    <!-- Menu Body: Contains the List of Menu Items and the Selected Items -->
    <div class="menu-body">
        <!-- Menu Items Section: Displays Items Based on Selected Category -->
        <div class="menu-items">


            @foreach (var product in FilteredProducts)
            {
                <div class="menu-item">
                    <div class="item-info">
                        <div class="item-name">@product.ProductName</div>
                        <div class="item-price">@product.Price.ToString("C")</div>
                    </div>
                    <!-- Add Item Button: Adds the Item to the Current Order -->
                    <button @onclick="() => productService.AddItem(product)">+</button>
                </div>
            }
        </div>
        <!-- Selected Items Section: Shows Items Added to the Current Order -->
        <div class="selected-items">
            <div class="selected-items-list">
                @foreach (var selectedItem in productService.SelectedItems.Where(i => i.Quantity > 0))
                {
                    <div class="selected-item">
                        <div class="selected-item-name">@selectedItem.Name x @selectedItem.Quantity</div>
                        <div class="selected-item-price">@((selectedItem.Price * selectedItem.Quantity).ToString("C"))</div>
                        <!-- Remove Item Button: Removes the Item from the Current Order -->
                        <button class="removeButton" @onclick="() => productService.RemoveItem(selectedItem)">-</button>
                    </div>
                }
            </div>
            <!-- Total Section: Displays GST and Total Amount for the Order -->
            <div class="total">

                <div>GST 10%: @((productService.GetTotal() * 0.1m).ToString("C"))</div>
                <div>Total: @((productService.GetTotal() * 1.1m).ToString("C"))</div>
                <!-- Print Order Button: Finalizes the Order and Triggers Printing -->
                <button class="print-button" @onclick="PrintOrder">PRINT</button>
            </div>
        </div>
    </div>
</div>

@code {
    // Flag to indicate whether a message should be shown to the user
    private bool showMessage = false;
    // Text content of the message to be displayed to the user
    private string messageText = "";
    // Currently selected category for filtering the product list, default is "All"
    private string selectedCategory = "All";

    protected override void OnInitialized()
    {
        // Subscribe to the time change event from the timer service
        // When the time changes, the component's state will be updated to reflect the change
        timerService.OnTimeChanged += () => InvokeAsync(StateHasChanged);
    }

    // Method to filter products based on the selected category from the dropdown menu
    private void FilterProducts(ChangeEventArgs e)
    {
        // Set the selected category to the value chosen by the user
        selectedCategory = e.Value.ToString();
    }

    // Property to get the list of products filtered by the selected category
    private IEnumerable<Product> FilteredProducts =>
        // If "All" categories are selected, return all products; otherwise, filter by category
        selectedCategory == "All" ?
        productService.Products :
        productService.Products.Where(p => p.Category == selectedCategory);

    // Method to process the order and handle the print operation
    private void PrintOrder()
    {
        messageText = productService.ProcessOrder();
        // Set the flag to show the message to the user
        showMessage = true;

        // Initiate a delay of 3000 milliseconds (3 seconds
        Task.Delay(3000).ContinueWith(_ =>
        {
            showMessage = false;
            InvokeAsync(StateHasChanged);
        });
    }

    public void Dispose()
    {
        // Dispose of the timer service to prevent memory leaks or unintended behavior
        timerService.Dispose();
    }
}