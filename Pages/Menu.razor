@page "/menu"
@using MyGoodnessHarold.Data
@inject UserStateService userStateService
@inject TimerService timerService
@inject ProductService productService

<div class="menu-container">
    <link href="css/Menu.css" rel="stylesheet">
    <div class="menu-header">
        <div class="header-text">
            <h3>Welcome, @userStateService.FirstName</h3>
            <p>@timerService.CurrentTime.ToString("HH:mm:ss")</p>
        </div>
        <h1 class="menu-title">Menu</h1>
    </div>

    @if (showMessage)
    {
        <div class="order-printed-message">
            @messageText
        </div>
    }

    <div class="menu-body">
        <div class="menu-items">
            @foreach (var product in productService.Products)
            {
                <div class="menu-item">
                    <div class="item-info">
                        <div class="item-name">@product.ProductName</div>
                        <div class="item-price">@product.Price.ToString("C")</div>
                    </div>
                    <button @onclick="() => productService.AddItem(product)">+</button>
                </div>
            }
        </div>
        <div class="selected-items">
            <div class="selected-items-list">
                @foreach (var selectedItem in productService.SelectedItems.Where(i => i.Quantity > 0))
                {
                    <div class="selected-item">
                        <div class="selected-item-name">@selectedItem.Name x @selectedItem.Quantity</div>
                        <div class="selected-item-price">@((selectedItem.Price * selectedItem.Quantity).ToString("C"))</div>
                        <button class="removeButton" @onclick="() => productService.RemoveItem(selectedItem)">-</button>
                    </div>
                }
            </div>
            <div class="total">
                <div>GST 10%: @((productService.GetTotal() * 0.1m).ToString("C"))</div>
                <div>Total: @((productService.GetTotal() * 1.1m).ToString("C"))</div>
                <button class="print-button" @onclick="PrintOrder">PRINT</button>
            </div>
        </div>
    </div>
</div>

@code {
    private bool showMessage = false;
    private string messageText = "";

    protected override void OnInitialized()
    {
        timerService.OnTimeChanged += () => InvokeAsync(StateHasChanged);
    }

    private void PrintOrder()
    {
        messageText = productService.ProcessOrder();
        showMessage = true;

        Task.Delay(3000).ContinueWith(_ =>
        {
            showMessage = false;
            InvokeAsync(StateHasChanged);
        });
    }

    public void Dispose()
    {
        timerService.Dispose();
    }
}
