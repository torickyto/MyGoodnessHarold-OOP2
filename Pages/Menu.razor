@page "/menu"
@using MyGoodnessHarold.Data
@inject UserStateService userStateService
@inject TimerService timerService
@inject ProductService productService

@*
  POS Menu System for "My Goodness Harold" Kitchen
 
  This POS (Point of Sale) menu system is designed to facilitate the ordering process for a kitchen environment.
  It displays a list of food items retrieved from a database, allowing kitchen staff or customers to place orders.
  Users are greeted by name and can view the current time. They can add items to their order by interacting with the menu,
  which updates a running total including tax. The system supports item selection, quantity updates, and order finalization.
  Once an order is finalized, a message is displayed, and there is an option to print the order. The interface is intuitive,
  ensuring a smooth ordering experience.
 *@


<div class="menu-container">
    <link href="css/Menu.css" rel="stylesheet">
    <div class="menu-header">
        <div class="header-text">
            <h3>Welcome, @userStateService.FirstName</h3>
            <p>@timerService.CurrentTime.ToString("HH:mm:ss")</p>
        </div>
        <h1 class="menu-title">Menu</h1>
    </div>

    @if (showMessage)
    {
        <div class="order-printed-message">
            @messageText
        </div>
    }

    <select @onchange="FilterProducts">
        @foreach (var category in productService.Categories)
        {
            <option value="@category">@category</option>
        }
    </select>

    <div class="menu-body">
        <div class="menu-items">


            @foreach (var product in FilteredProducts)
            
            @foreach (var product in Products) 


            {
                <div class="menu-item">
                    <div class="item-info">
                        <div class="item-name">@product.ProductName</div>
                        <div class="item-price">@product.Price.ToString("C")</div>
                    </div>
                    <button @onclick="() => productService.AddItem(product)">+</button>
                </div>
            }
        </div>

        <div class="selected-items">
            <div class="selected-items-list">
                @foreach (var selectedItem in productService.SelectedItems.Where(i => i.Quantity > 0))
                {
                    <div class="selected-item">
                        <div class="selected-item-name">@selectedItem.Name x @selectedItem.Quantity</div>
                        <div class="selected-item-price">@((selectedItem.Price * selectedItem.Quantity).ToString("C"))</div>
                        <button class="removeButton" @onclick="() => productService.RemoveItem(selectedItem)">-</button>
                    </div>
                }
            </div>
            <div class="total">
                <div>GST 10%: @((productService.GetTotal() * 0.1m).ToString("C"))</div>
                <div>Total: @((productService.GetTotal() * 1.1m).ToString("C"))</div>
                <button class="print-button" @onclick="PrintOrder">PRINT</button>
            </div>
        </div>
    </div>
</div>

@code {
    private bool showMessage = false;
    private string messageText = "";
    private string selectedCategory = "All";

    protected override void OnInitialized()
    {
        timerService.OnTimeChanged += () => InvokeAsync(StateHasChanged);
    }

    private void FilterProducts(ChangeEventArgs e)
    {
        selectedCategory = e.Value.ToString();
    }

    private IEnumerable<Product> FilteredProducts =>
        selectedCategory == "All" ?
        productService.Products :
        productService.Products.Where(p => p.Category == selectedCategory);

    private void PrintOrder()
    {
        messageText = productService.ProcessOrder();
        showMessage = true;

        Task.Delay(3000).ContinueWith(_ =>
        {
            showMessage = false;
            InvokeAsync(StateHasChanged);
        });
    }

    public void Dispose()
    {
        timerService.Dispose();
    }
}