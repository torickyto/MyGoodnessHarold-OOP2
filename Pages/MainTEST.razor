@page "/main"
@using MyGoodnessHarold.Data;
@using MySqlConnector;
<h3>Product Management</h3>

<style>
    #findreservationbtn {
        width: 300px;
    }

    #savebtn {
        width: 250px;
    }

    .centerbtn {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 20px;
    }

    button {
        font-size: 15px;
        background-color: royalblue;
        color: white;
    }

    .button:hover {
        background-color: blue;
    }

    label {
        font-size: 15px;
    }

    input {
        font-size: 15px;
    }

    .longinput {
        padding-right: 83%;
    }

    p {
        font-size: 13px;
        text-align: center;
    }

    .labelrow {
        display: inline-block;
        margin-right: 20%;
    }

    .inputrow {
        display: inline-block;
        margin-right: 1%;
        width: 250px;
    }

    h5 {
        text-align: center;
        margin-bottom: 10px;
        margin-top: 20px;
    }
</style>

<div>
    <label class="labelrow" for="ProductID">Product ID:</label>
    <label class="labelrow" for="ProductName">Product Name:</label>
    <label class="labelrow" for="Price">Price:</label>
</div>

<div>
    <input placeholder="Any" type="text" class="inputrow" name="ProductID" id="ProductID" @bind="searchID">
    <input placeholder="Any" type="text" class="inputrow" name="ProductName" id="ProductName" @bind="searchName">
    <input placeholder="Any" type="text" class="inputrow" name="Price" id="Price" @bind="searchPrice">
    <button class="button inputrow" id="findproductbtn" @onclick="FindProduct">Find Product</button>
</div>

<h5>Selection</h5>
<select name="courseSelection" @onchange="OnProductSelectionChange">
    @foreach (var Product in matchProducts.Any() ? matchProducts : allProducts)
    {
        <option value="@Product.ProductID - @Product.ProductName - @Product.Price">@Product.ProductID - @Product.ProductName - @Product.Price</option>
    }
</select>

<h5>Management</h5>

<label for="ProductID">Product ID:</label>
<br />
<input placeholder="Product ID" class="longinput" type="text" name="ProductID" id="ProductID" @bind="selectedID">
<br />
<br />

<label for="ProductName">Product Name:</label>
<br />
<input placeholder="Product Name" class="longinput" type="text" name="ProductName" id="ProductName" @bind="selectedName">
<br />
<br />

<label for="Price">Price:</label>
<br />
<input placeholder="Price" class="longinput" type="text" name="Price" id="Price" @bind="selectedPrice">
<br />
<br />


<div class="centerbtn">
    <button class="button" id="savebtn" @onclick="EditProduct">Save Product Information</button> <br />
</div>

<div class="centerbtn">
    <button class="button" id="createbtn" @onclick="AddProduct">Create A New Product</button> <br />
</div>

<div class="centerbtn">
    <button class="button" id="deletebtn" @onclick="DeleteProduct">Delete This Product</button> <br />
</div>



@code {
    private List<Product> allProducts = Product.Connect();
    private List<Product> matchProducts = new List<Product>();
    private List<string> products = new List<string>();
    private List<string> employees = new List<string>();
    private string selectedPrice;
    private string selectedID;
    private string selectedName;
    private string searchPrice;
    private string searchID;
    private string searchName;


    // Populate the selected Product into input elements
    private void OnProductSelectionChange(ChangeEventArgs e)
    {
        selectedID = e.Value.ToString();
        string[] values = selectedID.Split(new string[] { " - " }, StringSplitOptions.None);
        if (values.Length >= 3)
        {
            selectedID = values[0];
            selectedName = values[1];
            selectedPrice = values[2];
        }
    }

    // Search matched courses
    private void FindProduct()
    {
        matchProducts.Clear();

        foreach (var Product in allProducts)
        {
            bool match = true;

            if (!string.IsNullOrEmpty(searchID) && Product.ProductID != int.Parse(searchID))
            {
                match = false;
            }

            if (!string.IsNullOrEmpty(searchName) && !Product.ProductName.Contains(searchName, StringComparison.OrdinalIgnoreCase))
            {
                match = false;
            }

            if (!string.IsNullOrEmpty(searchPrice) && !Product.Price.Contains(searchPrice, StringComparison.OrdinalIgnoreCase))
            {
                match = false;
            }

            if (match)
            {
                matchProducts.Add(Product);
            }
        }
    }

    private void AddProduct()
    {

        var builder = new MySqlConnectionStringBuilder()
            {
                Server = "localhost",
                Database = "harold",
                UserID = "root",
                Password = "andromon",
            };

        using (var connection = new MySqlConnection(builder.ConnectionString))
        {
            connection.Open();
            string addsql = $"INSERT INTO `harold`.`coursetable` (`ProductID`, `ProductName`, `Price`) VALUES ('{selectedID}', '{selectedName}', '{selectedPrice}');";
            MySqlCommand command = new MySqlCommand(addsql, connection);
            command.ExecuteNonQuery();
        }
    }

    private void EditProduct()
    {

        var builder = new MySqlConnectionStringBuilder()
            {
                Server = "localhost",
                Database = "harold",
                UserID = "root",
                Password = "andromon",
            };

        using (var connection = new MySqlConnection(builder.ConnectionString))
        {
            connection.Open();
            string editsql = $"UPDATE `harold`.`coursetable` SET `ProductName` = '{selectedName}', `Price` = '{selectedPrice}' WHERE `ProductID` = '{selectedID}';";
            MySqlCommand command = new MySqlCommand(editsql, connection);
            command.ExecuteNonQuery();
        }
    }

    private void DeleteProduct()
    {
        var builder = new MySqlConnectionStringBuilder()
            {
                Server = "localhost",
                Database = "harold",
                UserID = "root",
                Password = "andromon",
            };

        using (var connection = new MySqlConnection(builder.ConnectionString))
        {
            connection.Open();
            string deletesql = $"DELETE FROM `harold`.`products` WHERE `ProductID` = '{selectedID}';";
            MySqlCommand command = new MySqlCommand(deletesql, connection);
            command.ExecuteNonQuery();
        }
    }
}